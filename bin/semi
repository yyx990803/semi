#!/usr/bin/env node
var argv = require('minimist')(process.argv.slice(2), {
  boolean: ['leading'],
  string: ['out'],
  boolean: ['silent']
})

var command = argv._[0]
if (command !== 'add' && command !== 'rm') {
  if (command) console.log('Invalid command: ' + command)
  usage()
}

var files = argv._.slice(1)
if (!files.length) {
  console.log('No files provided.')
  usage()
}

var semi = require('../lib')
var findit = require('findit')
var fs = require('fs')
var path = require('path')
var mkdirp = require('mkdirp')
var outDir = argv.out
var leading = argv.leading
var silent = argv.silent
// file processing state
var currentFile
var currentFileErrored

if (outDir) {
  mkdirp.sync(outDir)
}

semi.on('error', function (e) {
  currentFileErrored = true
  console.log(
    '[semi] Error: ' + e.message + ' at ' +
    e.line + ':' + e.column + ' in ' +
    currentFile
  )
})

files.forEach(function (file) {
  findit(file).on('file', convert)
})

function convert (file) {
  if (['.js','.ts'].indexOf(path.extname(file)) === -1) return
  currentFile = file
  currentFileErrored = false
  fs.readFile(file, 'utf-8', function (err, content) {
    if (err) throw err
    if (command === 'rm') command = 'remove'
    content = semi[command](content, {
      leading: leading
    })
    if (currentFileErrored) return
    var out = outDir
      ? path.join(outDir, path.basename(file))
      : file
    if (!silent) console.log('converted: ' + out)
    fs.writeFile(out, content)
  })
}

function usage () {
  console.log()
  console.log('  Usage: semi [add|rm] [files...] [--out dir] [--leading] [--silent]')
  console.log()
  console.log('  Options:')
  console.log('  --out      Output directory. If not specified, will overwrite original.')
  console.log('  --leading  Always add leading semicolons for lines that start with +-[(/.')
  console.log('  --silent   Suppress output messages.')
  console.log()
  process.exit(0)
}
